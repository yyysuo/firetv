// ==UserScript==
// @name         HiPDA BlackList (Non-blocking Enhanced)
// @description  4d4y.com论坛的黑名单插件, 支持使用iCloud账号同步, 支持与iOS客户端同步 (已优化加载)
// @version      0.5
// @author       Jichao Wu (Modified by Gemini)
// @license      MIT
// @namespace    com.jichaowu.hipda.nonblocking
// @updateURL    https://github.com/yyysuo/firetv/raw/refs/heads/master/4d4yiosblacklist.js
// @downloadURL  https://github.com/yyysuo/firetv/raw/refs/heads/master/4d4yiosblacklist.js
// @grant        GM_getValue
// @grant        GM_setValue
// @grant        GM_addStyle
// @match        https://www.4d4y.com/forum/*
// ==/UserScript==

(function() {
    'use strict';

    // ================= helpers ==================
    console.log("running at " + window.location.href);

    function q(s){if(document.body){return document.body.querySelector(s);}return null;}
    function xpath(s) {
        return document.evaluate(s, document, null, XPathResult.UNORDERED_NODE_SNAPSHOT_TYPE, null);
    }
    // ================= UI (立即执行部分) ==================

    // hi-pda-tools-by-2200
    function addConfigDiv() {
        var hp_cfg = document.createElement("div");
        hp_cfg.id = "hp_blacklist_config_div";
        hp_cfg.style = "position:fixed;align:center;width: 303px;padding: 15px;top:20px;right:20px;z-index:99;color:#fff;background:#9287AE;border:2px solid #bfbfbf;-moz-border-radius:5px;opacity:0.95;text-align:left;font-size:14px !important; overflow-y: scroll; height:80%;";
        hp_cfg.style.display = "none"; // 默认隐藏
        hp_cfg.innerHTML = `
            <a href="javascript:void(0)" id="hp_blacklist_close_button" style="position:fixed; top:25px; right:25px; color:white">关闭</a>
            <a href="javascript:void(0)" id="hp_blacklist_app_button" style="position:fixed; top:50px; right:25px; color:white">iOS客户端</a>
            <div id="hp_blacklist_blacklist"></div><br /><br />
            先登录iCloud才能同步
            <div id="apple-sign-in-button"></div>
            <div id="apple-sign-out-button"></div>
            <button id="hp_blacklist_sync_button" style="height: 40px; width: 218px; cursor: pointer; border: 1px solid black; border-radius: 5px; display: block; opacity: 1; background-color: white; font-size:18px">同步</button>
            <input id="hp_blacklist_username_input" type="text" value="name" style="display:none;"/><br />
            <button id="hp_blacklist_add_btn" style="display:none;">add user</button>
            <button id="hp_blacklist_remove_btn" style="display:none;">remove user</button>
        `;
        // 使用 document.body.appendChild 来确保元素能被添加到页面上
        if (document.body) {
            document.body.appendChild(hp_cfg);
        } else {
            // 如果body还没加载完，就等加载完再添加
            window.addEventListener('DOMContentLoaded', function() {
                document.body.appendChild(hp_cfg);
            });
        }


        // ===== 立即添加超链接到用户菜单(#umenu) =====
        var umenu = document.getElementById('umenu');
        if (umenu) {
            umenu.appendChild(document.createTextNode(" | "));
            var blacklistLink = document.createElement('a');
            blacklistLink.textContent = '黑名单';
            blacklistLink.href = 'javascript:void(0)';
            blacklistLink.style.cursor = 'pointer';
            umenu.appendChild(blacklistLink);
            blacklistLink.addEventListener('click', function(){
                hp_cfg.style.display = hp_cfg.style.display === 'none' ? '' : 'none';
            }, false);

            umenu.appendChild(document.createTextNode(" | "));
            var myThreadsLink = document.createElement('a');
            myThreadsLink.textContent = '我的帖子';
            myThreadsLink.href = 'https://www.4d4y.com/forum/my.php?item=threads';
            umenu.appendChild(myThreadsLink);

            umenu.appendChild(document.createTextNode(" | "));
            var myPostsLink = document.createElement('a');
            myPostsLink.textContent = '我的回复';
            myPostsLink.href = 'https://www.4d4y.com/forum/my.php?item=posts';
            umenu.appendChild(myPostsLink);

            umenu.appendChild(document.createTextNode(" | "));
            var myfavoritesLink = document.createElement('a');
            myfavoritesLink.textContent = '我的收藏';
            myfavoritesLink.href = 'https://www.4d4y.com/forum/my.php?item=favorites&type=thread';
            umenu.appendChild(myfavoritesLink);

            umenu.appendChild(document.createTextNode(" | "));
            var dLink = document.createElement('a');
            dLink.textContent = 'D板';
            dLink.href = 'https://www.4d4y.com/forum/forumdisplay.php?fid=2';
            umenu.appendChild(dLink);

            umenu.appendChild(document.createTextNode(" | "));
            var remind = document.createElement('a');
            remind.textContent = '提醒';
            remind.href = 'https://www.4d4y.com/forum/notice.php?filter=threads';
            umenu.appendChild(remind);
        }
    }
    // 立即执行UI添加，特别是链接
    addConfigDiv();


    // hi-pda-tools-by-2200
    function appendControl(){     // 添加[屏蔽]按钮
      var s = xpath("//div[@class='authorinfo']");
      for (var i = s.snapshotLength - 1; i >= 0; i--) {
        var t = s.snapshotItem(i);
        var a1=document.createElement('a');
        a1.innerHTML = '屏蔽';
        a1.href = '###';
        a1.addEventListener('click', onBlockUser, false);
        t.appendChild(document.createTextNode(" | "));
        t.appendChild(a1);
      }
    }
    // 立即添加屏蔽按钮
    appendControl();

    function updateUI() {
        updateBlockListUI();
        removeBlockedPost();
    }

    function updateBlockListUI() {
        var dom = q('#hp_blacklist_blacklist');
        if (!dom) return; // 防御式编程，因为面板可能还未添加到DOM
        var list = [];
        for (var i = 0; i < _list.length; i++) {
            var username = _list[i];
            list.push('<span class="hp_blacklist_username" style="font-size:12px">' + username + '</span>&nbsp&nbsp<a username="'+username+'" style="cursor:pointer;">x</a>');
        }
        dom.innerHTML = list.join('\n<br />');
        var buttons = dom.getElementsByTagName('a');
        for (let i = 0; i < buttons.length; i++) {
            let b = buttons[i];
            let u = b.getAttribute('username');
            b.addEventListener('click', function(){
                removeUser(u);
            }, false);
        }
    }

    // hi-pda-tools-by-2200
    function removeBlockedPost() {
        if (location.href.indexOf('viewthread.php') !== -1) {
            var s = xpath("//div[@class='postinfo']");
            for (var i = s.snapshotLength - 1; i >= 0; i--) {
                var t = s.snapshotItem(i);
                var a = t.getElementsByTagName('a')[0];
                if( a != undefined){
                    t.parentNode.parentNode.parentNode.parentNode.style.display = isUserInBlockList(a.text) ? 'none' : '';
                }
            }
        }
        if (location.href.indexOf('forumdisplay.php') !== -1) {
            var s = xpath("//td[@class='author']");
            for (var i = s.snapshotLength - 1; i >= 0; i--) { // 屏蔽BLACK_LIST的发帖
                var t = s.snapshotItem(i);
                var a = t.getElementsByTagName('a')[0];
                if( a != undefined){
                    t.parentNode.style.display = isUserInBlockList(a.text) ? 'none' : '';
                }
            }
        }
    }

    // hi-pda-tools-by-2200
    function onBlockUser(e){      // [屏蔽] 按钮触发
        var node = e.target.parentNode.parentNode.parentNode.parentNode.parentNode.getElementsByClassName('postinfo')[0].getElementsByTagName('a')[0];
        var username = node.text;
        addUser(username);
    };

    // ================= icloud auth (异步加载后执行) ==================

    var isCloudLogin = false;

    // 核心修改：动态加载 CloudKit.js
    function loadCloudKit() {
        const script = document.createElement('script');
        script.src = 'https://cdn.apple-cloudkit.com/ck/2/cloudkit.js';
        script.onload = () => {
            console.log('cloudkit.js loaded successfully.');
            // 加载成功后，手动触发 cloudkitloaded 事件
            window.dispatchEvent(new Event('cloudkitloaded'));
        };
        script.onerror = () => {
            console.error('Failed to load cloudkit.js. iCloud sync will be unavailable.');
            // 可以在这里给用户一些提示
             const syncButton = q('#hp_blacklist_sync_button');
             if(syncButton) {
                 syncButton.innerHTML = 'iCloud加载失败';
                 syncButton.disabled = true;
             }
        };
        document.head.appendChild(script);
    }

    // 将所有依赖CloudKit的逻辑放入一个初始化函数中
    function initializeCloudKitFeatures() {
        CloudKit.configure({
            locale: 'zh-cn',
            containers: [{
                containerIdentifier: 'iCloud.wujichao.HiPDA',
                apiTokenAuth: {
                    apiToken: '8f8836b5e9db0c4260ac058cabbb3b4d7a19f723ab78ced6f3fb997e72c08612',
                    persist: true,
                    signInButton: { id: 'apple-sign-in-button', theme: 'white-with-outline' },
                    signOutButton: { id: 'apple-sign-out-button', theme: 'white-with-outline' }
                },
                environment: 'production'
            }]
        });

        // 绑定UI事件（这部分也依赖CloudKit的功能）
        q('#hp_blacklist_sync_button').addEventListener('click', function(){
            if (!isCloudLogin) {
                alert('先登录iCloud才能同步');
                return;
            }
            var b = q('#hp_blacklist_sync_button');
            b.innerHTML = '同步中...';
            console.log('sync...');
            update(function(error) {
                if (!error) {
                    b.innerHTML = '同步成功';
                } else {
                    b.innerHTML = '同步失败';
                }
                console.log('sync result: ', _list);
            });
        }, false);
        q('#hp_blacklist_close_button').addEventListener('click', function(){ q('#hp_blacklist_config_div').style.display = 'none'; }, false);
        q('#hp_blacklist_app_button').addEventListener('click', function(){ window.location.href = "http://www.4d4y.com/forum/viewthread.php?tid=1272557"; }, false);
        q('#hp_blacklist_add_btn').addEventListener('click', function(){ addUser(q('#hp_blacklist_username_input').value); }, false);
        q('#hp_blacklist_remove_btn').addEventListener('click', function(){ removeUser(q('#hp_blacklist_username_input').value); }, false);

        demoSetUpAuth();
        // 注意：这里的init()是cloudkit相关的初始化，本地功能的init()已在前面执行
        console.log('CloudKit features initialized.');
    }


    window.addEventListener('cloudkitloaded', initializeCloudKitFeatures);


    function displayUserName(name) {
        console.log(name);
    }

    function showDialogForPersistError(err) {
        console.warn(err);
    }

    function demoSetUpAuth() {
      var container = CloudKit.getDefaultContainer();
      function gotoAuthenticatedState(userIdentity) {
        var name = userIdentity.nameComponents;
        if(name) {
          displayUserName(name.givenName + ' ' + name.familyName);
        } else {
          displayUserName('User record name: ' + userIdentity.userRecordName);
        }
        isCloudLogin = true;
        console.log('login then check update...');
        var ts = getLastUpdateTime();
        var interval = +new Date() - ts;
        console.log('interval ' + interval);
        if (interval > 24 * 60 * 60 * 1000) {
            console.log('update...');
            update(function(error) {
                console.log('update result: ', _list);
                saveLastUpdateTime(+new Date());
            });
        }
        container.whenUserSignsOut().then(gotoUnauthenticatedState);
      }
      function gotoUnauthenticatedState(error) {
        isCloudLogin = false;
        if(error && error.ckErrorCode === 'AUTH_PERSIST_ERROR') {
          showDialogForPersistError();
        }
        displayUserName('Unauthenticated User');
        container.whenUserSignsIn().then(gotoAuthenticatedState).catch(gotoUnauthenticatedState);
      }
      return container.setUpAuth().then(function(userIdentity) {
          if(userIdentity) {
            gotoAuthenticatedState(userIdentity);
          } else {
            gotoUnauthenticatedState();
          }
        });
    }

    // ================= blocklist service ================

    var recordName = 'blocklist';
    var _list = [];
    var _hashTable = {};


    function init() {
        rebuildWithList(getSavedList());
        migrateOldData();
        updateUI();
    }
    // 立即执行本地数据初始化和UI渲染
    init();
    // 启动CloudKit的异步加载
    loadCloudKit();


    function rebuildWithList(list) {
        _list = list;
        _hashTable = {};
        for (var i = 0; i < list.length; i++) {
            _hashTable[list[i]] = true;
        }
    }

    function rebuildWithRecord(record) {
        if (record && record.fields &&  record.fields['list'] && record.fields['list'].value) {
            var list = record.fields['list'].value;
            rebuildWithList(list);
        } else {
             rebuildWithList([]);
        }
    }

    function update(callback) {
        if (!isCloudLogin) {
            console.log('updateList -> not login');
            if(callback) callback(new Error("Not logged in"));
            return;
        }
        fetchRecord(function(record, error) {
            if (!error) {
                rebuildWithRecord(record);
                saveAll();
                updateUI();
            }
            if(callback) callback(error);
        });
    }

    // ================= icloud database ==================

    function fetchRecord(callback) {
        console.log('fetchRecord...');
        var container = CloudKit.getDefaultContainer();
        var privateDatabase = container.privateCloudDatabase;
        privateDatabase.fetchRecords(recordName).then(function(response) {
            var error = response.hasErrors ? response.errors[0] : null;
            var fetchedRecord = error ? null : response.records[0];
            console.log('fetchRecord result', error, fetchedRecord);
            if (error && error.ckErrorCode === "NOT_FOUND") {
                var record = { recordName: recordName, recordType: 'BlockList' };
                saveRecord(record, function(savedRecord, error) {
                    callback(savedRecord, error);
                });
                return;
            }
            callback(fetchedRecord, error);
        });
    }

    function saveRecord(record, callback) {
        console.log('saveRecord...', record);
        var container = CloudKit.getDefaultContainer();
        var privateDatabase = container.privateCloudDatabase;
        privateDatabase.saveRecords(record).then(function(response) {
            var error = response.hasErrors ? response.errors[0] : null;
            var savedRecord = error ? null : response.records[0];
            console.log('saveRecord result', error, savedRecord);
            callback(savedRecord, error);
        });
    }

    var working = false;
    function updateList(action) {
        console.log('updateList');

        // 立即更新本地数据和UI
        action();
        saveAll();
        updateUI();

        if (!isCloudLogin) {
            console.log('updateList -> not login, changes saved locally.');
            return;
        }

        if (working) {
            console.log('working');
            alert('操作中, 请稍后再试');
            return;
        }
        working = true;

        fetchRecord(function(record, error) {
            if (!error) {
                rebuildWithRecord(record);
                action(); // 在云端数据基础上再次执行动作，以合并冲突
                saveAll();
                updateUI();
                record.fields['list'] = {value: _list};
                saveRecord(record, function(savedRecord, error) {
                    working = false;
                });
            } else {
                 working = false;
            }
        });
    }

    // ================= blacklist ==================
    function isUserInBlockList(username) {
        return !!_hashTable[username];
    }

    function addUser(username) { addUsers([username]); }
    function removeUser(username) { removeUsers([username]); }

    function addUsers(usernames) {
        console.log('addUsers', usernames);
        updateList(function() {
            for (var i = 0; i < usernames.length; i++) {
                var username = usernames[i];
                if (isUserInBlockList(username)) continue;
                _list.push(username);
                _hashTable[username] = true;
            }
        });
    }

    function removeUsers(usernames) {
        console.log('removeUsers', usernames);
        updateList(function() {
            for (var i = 0; i < usernames.length; i++) {
                var username = usernames[i];
                if (!isUserInBlockList(username)) continue;
                var index = _list.indexOf(username);
                if (index > -1) {
                    _list.splice(index, 1);
                }
                _hashTable[username] = false;
            }
        });
    }

    // ================= persistence ==================
    function saveAll() { saveList(_list); }
    function getSavedList() { return GM_getValue('HPSavedList_V2') || []; }
    function saveList(list) { GM_setValue('HPSavedList_V2', list); }
    function getLastUpdateTime() { return GM_getValue('HPLastUpdateTime') || 0; }
    function saveLastUpdateTime(ts) { GM_setValue('HPLastUpdateTime', ts); }

    // ================= migrate ==================
    function migrateOldData() {}

})();

// =========================================================================
// Part 2: 新增的“已读变灰”功能 (最终修复版 - 精准判断)
// =========================================================================
(function() {
    'use strict';

    // 仅在帖子列表页运行
    if (location.href.indexOf('forumdisplay.php') === -1) {
        return;
    }

    const markVisitedThreads = function() {
        const VISITED_THREADS_KEY = 'h_visited_threads_v2';
        const MAX_VISITED_THREADS = 2000;
        let visitedThreads = GM_getValue(VISITED_THREADS_KEY, []);

        const threadLinks = document.querySelectorAll('tbody[id^="normalthread_"] span[id^="thread_"] a');

        threadLinks.forEach(link => {
            if (link.dataset.visitedHandled) {
                return;
            }
            link.dataset.visitedHandled = 'true';

            const href = link.getAttribute('href');
            const match = href.match(/tid=(\d+)/);

            if (match) {
                const threadId = match[1];

                if (visitedThreads.includes(threadId)) {
                    link.style.color = '#999999';
                }

                // 【核心修改】监听 mousedown 事件，并检查鼠标按键
                link.addEventListener('mousedown', function(event) {
                    // event.button === 0  -> 鼠标左键
                    // event.button === 1  -> 鼠标中键 (滚轮)
                    // 我们只处理这两种情况，忽略右键 (event.button === 2)
                    if (event.button === 0 || event.button === 1) {
                        link.style.color = '#999999'; // 立即变灰

                        let currentVisited = GM_getValue(VISITED_THREADS_KEY, []);
                        if (!currentVisited.includes(threadId)) {
                            currentVisited.push(threadId);
                            if (currentVisited.length > MAX_VISITED_THREADS) {
                                currentVisited = currentVisited.slice(currentVisited.length - MAX_VISITED_THREADS);
                            }
                            GM_setValue(VISITED_THREADS_KEY, currentVisited);
                        }
                    }
                });

                // 为了防止在右键点击时，浏览器默认的拖拽行为影响体验，
                // 我们可以阻止 mousedown 事件后的默认行为，但这可能会有其他副作用。
                // 经过权衡，目前仅判断button的方式是副作用最小的。
                // 如果需要，可以添加以下代码来阻止右键拖拽：
                link.addEventListener('dragstart', function(event) {
                    // 如果拖拽是由非左键发起的，可以阻止它
                    if(event.button !== 0) {
                       // event.preventDefault();
                    }
                });
            }
        });
    };

    const threadListContainer = document.getElementById('threadlist');
    if (threadListContainer) {
        const observer = new MutationObserver(markVisitedThreads);
        const config = { childList: true, subtree: true };
        observer.observe(threadListContainer, config);
        markVisitedThreads();
    }
})();
